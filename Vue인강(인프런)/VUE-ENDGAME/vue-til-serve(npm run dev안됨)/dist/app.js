// libs
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import morgan from 'morgan';
import mongoose from 'mongoose';
import detectPort from 'detect-port';
import chalk from 'chalk'; // api

import auth from './api/auth.js';
import posts from './api/posts.js';
import docs from './utils/api-doc.js'; // utils

import { authenticateUser } from './utils/auth.js'; // mongo db

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
mongoose.connect('mongodb+srv://test:1234@cluster0-tb8u4.mongodb.net/test?retryWrites=true&w=majority', {
  useNewUrlParser: true
});
mongoose.Promise = global.Promise; // server setup

let port;

async function configServer() {
  port = 3000 || (await detectPort(3000));
}

configServer(); // express setup

const app = express();
app.use(cors());
app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(bodyParser.json());
app.use(morgan('dev')); // log request
// express routers

app.use('/', auth);
app.use('/posts', authenticateUser, posts); // api docs

app.use('/api', docs); // start

app.listen(port, () => console.log(`${chalk.white.bgHex('#41b883').bold(`VUE TIL SERVER IS RUNNING ON ${port}`)}`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsImNvcnMiLCJib2R5UGFyc2VyIiwibW9yZ2FuIiwibW9uZ29vc2UiLCJkZXRlY3RQb3J0IiwiY2hhbGsiLCJhdXRoIiwicG9zdHMiLCJkb2NzIiwiYXV0aGVudGljYXRlVXNlciIsImRiIiwiY29ubmVjdGlvbiIsIm9uIiwiY29uc29sZSIsImVycm9yIiwiYmluZCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJQcm9taXNlIiwiZ2xvYmFsIiwicG9ydCIsImNvbmZpZ1NlcnZlciIsImFwcCIsInVzZSIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImpzb24iLCJsaXN0ZW4iLCJsb2ciLCJ3aGl0ZSIsImJnSGV4IiwiYm9sZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxPQUFQLE1BQW9CLFNBQXBCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsYUFBdkI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLFFBQW5CO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixVQUFyQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsYUFBdkI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCLEMsQ0FFQTs7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLGVBQWpCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixnQkFBbEI7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLG9CQUFqQixDLENBRUE7O0FBQ0EsU0FBU0MsZ0JBQVQsUUFBaUMsaUJBQWpDLEMsQ0FFQTs7QUFDQSxNQUFNQyxFQUFFLEdBQUdQLFFBQVEsQ0FBQ1EsVUFBcEI7QUFDQUQsRUFBRSxDQUFDRSxFQUFILENBQU0sT0FBTixFQUFlQyxPQUFPLENBQUNDLEtBQVIsQ0FBY0MsSUFBZCxDQUFtQkYsT0FBbkIsRUFBNEIsMkJBQTVCLENBQWY7QUFDQVYsUUFBUSxDQUFDYSxPQUFULENBQ0UscUZBREYsRUFFRTtBQUNFQyxFQUFBQSxlQUFlLEVBQUU7QUFEbkIsQ0FGRjtBQU1BZCxRQUFRLENBQUNlLE9BQVQsR0FBbUJDLE1BQU0sQ0FBQ0QsT0FBMUIsQyxDQUVBOztBQUNBLElBQUlFLElBQUo7O0FBQ0EsZUFBZUMsWUFBZixHQUE4QjtBQUM1QkQsRUFBQUEsSUFBSSxHQUFHLFNBQVMsTUFBTWhCLFVBQVUsQ0FBQyxJQUFELENBQXpCLENBQVA7QUFDRDs7QUFDRGlCLFlBQVksRyxDQUVaOztBQUNBLE1BQU1DLEdBQUcsR0FBR3ZCLE9BQU8sRUFBbkI7QUFDQXVCLEdBQUcsQ0FBQ0MsR0FBSixDQUFRdkIsSUFBSSxFQUFaO0FBQ0FzQixHQUFHLENBQUNDLEdBQUosQ0FBUXRCLFVBQVUsQ0FBQ3VCLFVBQVgsQ0FBc0I7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBdEIsQ0FBUjtBQUNBSCxHQUFHLENBQUNDLEdBQUosQ0FBUXRCLFVBQVUsQ0FBQ3lCLElBQVgsRUFBUjtBQUNBSixHQUFHLENBQUNDLEdBQUosQ0FBUXJCLE1BQU0sQ0FBQyxLQUFELENBQWQsRSxDQUF3QjtBQUV4Qjs7QUFDQW9CLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLEdBQVIsRUFBYWpCLElBQWI7QUFDQWdCLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFFBQVIsRUFBa0JkLGdCQUFsQixFQUFvQ0YsS0FBcEMsRSxDQUVBOztBQUNBZSxHQUFHLENBQUNDLEdBQUosQ0FBUSxNQUFSLEVBQWdCZixJQUFoQixFLENBRUE7O0FBQ0FjLEdBQUcsQ0FBQ0ssTUFBSixDQUFXUCxJQUFYLEVBQWlCLE1BQ2ZQLE9BQU8sQ0FBQ2UsR0FBUixDQUNHLEdBQUV2QixLQUFLLENBQUN3QixLQUFOLENBQ0FDLEtBREEsQ0FDTSxTQUROLEVBRUFDLElBRkEsQ0FFTSxnQ0FBK0JYLElBQUssRUFGMUMsQ0FFNkMsRUFIbEQsQ0FERiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYnNcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgbW9yZ2FuIGZyb20gJ21vcmdhbic7XG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IGRldGVjdFBvcnQgZnJvbSAnZGV0ZWN0LXBvcnQnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcblxuLy8gYXBpXG5pbXBvcnQgYXV0aCBmcm9tICcuL2FwaS9hdXRoLmpzJztcbmltcG9ydCBwb3N0cyBmcm9tICcuL2FwaS9wb3N0cy5qcyc7XG5pbXBvcnQgZG9jcyBmcm9tICcuL3V0aWxzL2FwaS1kb2MuanMnO1xuXG4vLyB1dGlsc1xuaW1wb3J0IHsgYXV0aGVudGljYXRlVXNlciB9IGZyb20gJy4vdXRpbHMvYXV0aC5qcyc7XG5cbi8vIG1vbmdvIGRiXG5jb25zdCBkYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG5kYi5vbignZXJyb3InLCBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSwgJ01vbmdvREIgY29ubmVjdGlvbiBlcnJvcjonKSk7XG5tb25nb29zZS5jb25uZWN0KFxuICAnbW9uZ29kYitzcnY6Ly90ZXN0OjEyMzRAY2x1c3RlcjAtdGI4dTQubW9uZ29kYi5uZXQvdGVzdD9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHknLFxuICB7XG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICB9LFxuKTtcbm1vbmdvb3NlLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcblxuLy8gc2VydmVyIHNldHVwXG5sZXQgcG9ydDtcbmFzeW5jIGZ1bmN0aW9uIGNvbmZpZ1NlcnZlcigpIHtcbiAgcG9ydCA9IDMwMDAgfHwgKGF3YWl0IGRldGVjdFBvcnQoMzAwMCkpO1xufVxuY29uZmlnU2VydmVyKCk7XG5cbi8vIGV4cHJlc3Mgc2V0dXBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKG1vcmdhbignZGV2JykpOyAvLyBsb2cgcmVxdWVzdFxuXG4vLyBleHByZXNzIHJvdXRlcnNcbmFwcC51c2UoJy8nLCBhdXRoKTtcbmFwcC51c2UoJy9wb3N0cycsIGF1dGhlbnRpY2F0ZVVzZXIsIHBvc3RzKTtcblxuLy8gYXBpIGRvY3NcbmFwcC51c2UoJy9hcGknLCBkb2NzKTtcblxuLy8gc3RhcnRcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT5cbiAgY29uc29sZS5sb2coXG4gICAgYCR7Y2hhbGsud2hpdGVcbiAgICAgIC5iZ0hleCgnIzQxYjg4MycpXG4gICAgICAuYm9sZChgVlVFIFRJTCBTRVJWRVIgSVMgUlVOTklORyBPTiAke3BvcnR9YCl9YCxcbiAgKSxcbik7XG4iXX0=